#version 410 core

// shader from: https://ogldev.org/www/tutorial30/tutorial30.html

layout (quads, equal_spacing, ccw) in;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform sampler2D gDisplacementMap;
float gDispFactor = 1;

in vec3 WorldPos_ES_in[];
in vec2 TexCoord_ES_in[];
in vec3 Normal_ES_in[];

out vec3 WorldPos_FS_in;
out vec2 TexCoord_FS_in;
out vec3 Normal_FS_in;
out vec3 FragPos;
//out float tessCoord;

mat4 gVP = projection * view * model;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    // vec2 a = mix(v0, v1, gl_tessCoord.x);
    // vec2 b = mix(v1, v2, gl_tessCoord.y);
    // vec2 c = mix(v2, v0, gl_tessCoord.z);
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}


void main()
{
	// Interpolate the attributes of the output vertex using the barycentric coordinates

    // debug: try not interpolating:
    // TexCoord_FS_in = TexCoord_ES_in[0];

    TexCoord_FS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
    Normal_FS_in = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);
    Normal_FS_in = normalize(Normal_FS_in);
    WorldPos_FS_in = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);

    // Displace the vertex along the normal
    // float Displacement = texture(gDisplacementMap, TexCoord_FS_in.xy).x;
    // WorldPos_FS_in += Normal_FS_in * Displacement * gDispFactor;
    gl_Position = gVP * vec4(WorldPos_FS_in, 1.0);

    FragPos = vec3(view * model * vec4(WorldPos_FS_in,1));

    // tessCoord = gl_TessCoord.y;
}